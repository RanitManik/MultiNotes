generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url        = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

enum Plan {
    free
    pro
}

enum Role {
    admin
    member
}

model Tenant {
    id   String @id @default(cuid())
    slug String @unique
    name String
    plan Plan   @default(free)

    users User[]
    notes Note[]

    @@map("tenants")
}

model User {
    id            String @id @default(cuid())
    email         String @unique
    first_name    String?
    last_name     String?
    password_hash String?
    role          Role
    tenant_id     String?
    emailVerified DateTime?
    image         String?

    tenant Tenant? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
    notes  Note[]

    // NextAuth fields
    accounts Account[]
    sessions Session[]

    @@map("users")
}

model Note {
    id         String   @id @default(cuid())
    tenant_id  String
    author_id  String
    title      String
    content    Json
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    tenant Tenant @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
    author User   @relation(fields: [author_id], references: [id], onDelete: Cascade)

    @@map("notes")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
